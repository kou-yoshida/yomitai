generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String           @id @default(cuid())
  name          String?
  githubUrl     String?
  zennUrl       String?
  quitaUrl      String?
  email         String?          @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  private       Boolean          @default(false)
  accounts      Account[]
  follow        FollowFollowed[] @relation("follow")
  followed      FollowFollowed[] @relation("followed")
  notifications Notification[]
  tags          Tag[]
  todos         Todo[]
  updatedLogs   UpdatedLog[]

  @@index([id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Todo {
  id          String       @id @default(uuid())
  url         String
  content     String?
  status      Status
  userId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id])
  tags        TodoTag[]
  updatedLogs UpdatedLog[]

  @@index([userId])
}

model Tag {
  id        String    @id @default(uuid())
  name      String
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  tags      TodoTag[]

  @@index([userId])
}

model TodoTag {
  todoId String
  tagId  String
  tag    Tag    @relation(fields: [tagId], references: [id])
  todo   Todo   @relation(fields: [todoId], references: [id])

  @@id([todoId, tagId])
  @@index([todoId])
  @@index([tagId])
}

model UpdatedLog {
  userId     String
  todoId     String
  actionType ActionType
  id         String     @id @default(uuid())
  todo       Todo       @relation(fields: [todoId], references: [id])
  user       User       @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([todoId])
}

model FollowFollowed {
  followUserId   String
  followedUserId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  followUser     User     @relation("follow", fields: [followUserId], references: [id])
  followedUser   User     @relation("followed", fields: [followedUserId], references: [id])

  @@id([followedUserId, followUserId])
  @@index([followedUserId])
  @@index([followUserId])
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  createdAt DateTime         @default(now())
  readAt    DateTime?
  type      NotificationType
  user      User             @relation(fields: [userId], references: [id])
}

enum Status {
  SUSPENDED
  COMPLETED
  DELETED
}

enum ActionType {
  CREATE
  COMPLETE
}

enum NotificationType {
  FOLLOW
  TODO
}
