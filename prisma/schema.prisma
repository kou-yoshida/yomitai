datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String  @id @default(cuid())
  name      String?
  githubUrl String?
  zennUrl   String?
  quitaUrl  String?

  email         String?   @unique
  emailVerified DateTime?
  image         String?
  private       Boolean   @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  todos       Todo[]
  tags        Tag[]
  updatedLogs UpdatedLog[]

  accounts Account[]

  @@index([id])
}

// for next-auth @see https://authjs.dev/reference/adapter/prisma
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Todo {
  id      String @id @default(uuid())
  url     String
  content String
  status  Status
  userId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user        User         @relation(fields: [userId], references: [id])
  updatedLogs UpdatedLog[]
  tags        TodoTag[]

  @@index([userId])
}

enum Status {
  SUSPENDED
  COMPLETED
}

model Tag {
  id     String @id @default(uuid())
  name   String
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  tags TodoTag[]

  @@index([userId])
}

model TodoTag {
  todoId String
  tagId  String

  todo Todo @relation(fields: [todoId], references: [id])
  tag  Tag  @relation(fields: [tagId], references: [id])

  @@id([todoId, tagId])
  @@index([todoId])
  @@index([tagId])
}

model UpdatedLog {
  id        String @id @default(uuid())
  userId     String
  todoId     String
  actionType ActionType

  user User @relation(fields: [userId], references: [id])
  todo Todo @relation(fields: [todoId], references: [id])

  @@index([userId])
  @@index([todoId])
}

enum ActionType {
  CREATE
  COMPLETE
}

model Follow {
  userId       String
  followUserId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, followUserId])
  @@index([userId])
  @@index([followUserId])
}
